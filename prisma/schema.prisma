// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                 String          @id  @default(uuid())
  name               String          @db.VarChar(255)
  email              String          @unique @db.VarChar(255)  
  password           String          @db.VarChar(255)
  zipCode            String          @db.VarChar(255)
  address            String          @db.VarChar(255)
  detailAddress      String          @db.VarChar(255)
  phoneNumber        String          @unique @db.VarChar(255)
  registrationNumber String          @unique @db.VarChar(255)
  nickname           String          @unique @db.VarChar(255)
  birthday           DateTime        @default(now())
  gender             GenderType      @default(MALE)
  isNewNews_SMS      Boolean         @default(true)
  isNotice_SMS       Boolean         @default(true)
  isPromotion_SMS    Boolean         @default(true)
  isNewNews_Email    Boolean         @default(true)
  isNotice_Email     Boolean         @default(true)
  isPromotion_Email  Boolean         @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  adopterAdoptions   Adoption[]      @relation("AdopterAdoptions")
  breederAdoptions   Adoption[]      @relation("BreederAdoptions")
  animals            Animal[]
  userCurriculum     UserCurriculum[]
  reviews            Review[]
  userPayment        UserPayment[]
  lectureBookmarks   LectureBookmark[]   // One-to-many relationship with Bookmark
  tutorBookmarks     TutorBookmark[]

}

model UserPayment {
  id                  String          @id  @default(uuid())
  user_email          String          @db.VarChar(255)
  membershipType      MembershipType
  membershiPrice      Int             @default(9900)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  userId              String
  user                User?           @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserCurriculum {
  id                  String              @id  @default(uuid())
  animal_type         AnimalType          @default(DOG)
  curriculumStep      CurriculumStep      @default(LECTURE)
  curriculumCategory  CurriculumCategory  @default(TRAINING)
  curriculumIndex     Int                 @default(1)
  attendances         Json?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  userId              String
  user                User?               @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Corporation {
  id                String                    @id  @default(uuid())
  password          String                    @db.VarChar(255)
  owner_name        String                    @db.VarChar(255)        
  corporation_name  String                    @db.VarChar(255)      
  zipCode           String                    @db.VarChar(255)
  address           String                    @db.VarChar(255)
  detailAddress     String                    @db.VarChar(255)
  phoneNumber       String                    @unique @db.VarChar(255)  
  email             String                    @unique @db.VarChar(255)
  business_number   String                    @unique @db.VarChar(255)
  accessStatus      CorporationAccessStatus   @default(STANDARD)
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  tutors            Tutor[]
  breederAdoptions  Adoption[]                @relation("BreederCorporationAdoptions")
  animals           Animal[]
  trainingCenters   TrainingCenter[]
}

model Tutor {
  id                   String          @id @default(uuid())
  name                 String          @db.VarChar(255)
  introduction         String          @db.Text
  career               String          @db.VarChar(255)
  profile_img          String          @db.VarChar(255)
  occupation           OccupationType  @default(TRAINER)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  corporationId        String
  corporation          Corporation?    @relation(fields: [corporationId], references: [id])
  lectures             Lecture[]
  curriculumLectures   CurriculumLecture[]
  bookmarks            TutorBookmark[]
  tutorTrainingCenters TutorTrainingCenter[]

  @@index([corporationId])
}

model Lecture {
  id                String          @id  @default(uuid())
  title             String          @db.VarChar(255)
  content           String          @db.Text
  animal_type       AnimalType      @default(DOG)
  price_type        PriceType       @default(FREE)
  category          Category        @default(TRAINING)
  thumbnailPath     String          @db.VarChar(255)
  videoUrl          String          @db.VarChar(255)
  like              Int             @default(0)
  tags              String[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  tutorId           String
  tutor             Tutor           @relation(fields: [tutorId], references: [id])
  bookmarks         LectureBookmark[]   // One-to-many relationship with Bookmark

  @@index([tutorId])
}

model LectureBookmark {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  lectureId String
  lecture   Lecture   @relation(fields: [lectureId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  
  @@unique([userId, lectureId]) // Ensures a user can't bookmark the same lecture more than once
}

model TutorBookmark {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  tutorId   String
  tutor     Tutor     @relation(fields: [tutorId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  @@unique([userId, tutorId]) // Ensures a user can't bookmark the same lecture more than once
}

model CurriculumLecture {
  id                      String               @id  @default(uuid())
  index                   Int                  @default(0)
  title                   String               @db.VarChar(255)
  content                 String               @db.Text
  animal_type             AnimalType           @default(CAT)
  category                CurriculumCategory   @default(TRAINING)
  thumbnailPath           String               @db.VarChar(255)
  videoUrl                String               @db.VarChar(255)
  videoTime               String?              @db.VarChar(255)
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  tutorId                 String
  tutor                   Tutor?               @relation(fields: [tutorId], references: [id])

  @@index([tutorId])
}

model Adoption {
  id                    String          @id  @default(uuid())
  adoption_date         DateTime?       @default(now())
  abandon_date          DateTime?
  status                AdoptionStatus  @default(NOT_ADOPTION)
  step                  AdoptionStep    @default(NOT_INVITATION)
  abandon_reason        String?         @db.Text
  educationForm         String[] //[0] 분양자, [1] 입양자
  trainingForm          String[] //[0] 분양자, [1] 입양자
  adoptionForm          String[] //[0] 분양자, [1] 입양자
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  adopterId             String?
  breederId             String?
  breederCorporationId  String?
  animalId              String?
  adopter               User?           @relation("AdopterAdoptions", fields: [adopterId], references: [id])
  breeder               User?           @relation("BreederAdoptions", fields: [breederId], references: [id])
  breederCorporation    Corporation?    @relation("BreederCorporationAdoptions", fields: [breederCorporationId], references: [id])
  animal                Animal?         @relation(fields: [animalId], references: [id])

  @@index([adopterId])
  @@index([breederId])
  @@index([breederCorporationId])
  @@index([animalId])
}

model Animal {
  id                String          @id  @default(uuid())
  name              String?         @db.VarChar(255)
  age               Int?            @default(0)
  gender            GenderType      @default(MALE)
  breed             String          @db.VarChar(255)
  profile           String          @db.VarChar(255)
  additionalImgs    String[]          
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  userId            String?
  corporationId     String?
  user              User?                                                                                                                                                                                                             @relation(fields: [userId], references: [id])
  corporation       Corporation?    @relation(fields: [corporationId], references: [id])
  adoptions         Adoption[]

  @@index([userId])
  @@index([corporationId])
}

model TrainingCenter {
  id                 String          @id  @default(uuid())
  name               String          @db.VarChar(255)
  introduction       String          @db.Text
  profile            String          @db.VarChar(255)
  additionalImgs     String[]       
  address            String          @db.VarChar(255)
  refundPolicys      String[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  corporationId      String          
  corporation        Corporation?    @relation(fields: [corporationId], references: [id])
  tutorTrainingCenters TutorTrainingCenter[]

  @@index([corporationId])
}

model TutorTrainingCenter {
  tutorId            String
  trainingCenterId   String
  price              String?         @db.VarChar(255)
  holidays           String[]
  like               Int             @default(0)
  reviews            Review[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  tutor              Tutor           @relation(fields: [tutorId], references: [id])
  trainingCenter     TrainingCenter  @relation(fields: [trainingCenterId], references: [id])

  @@id([tutorId, trainingCenterId]) // 복합 기본 키
  @@index([tutorId])
  @@index([trainingCenterId])
}

model CurriculumTraining {
  id                      String               @id  @default(uuid())
  index                   Int                  @default(0)
  title                   String               @db.VarChar(255)
  content                 String               @db.Text
  animal_type             AnimalType           @default(CAT)
  category                CurriculumCategory   @default(TRAINING)
  trainingTime            Int                  @default(0)
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
}

model Review {
  id                 String          @id  @default(uuid())
  parentId           String?
  userName           String          @db.VarChar(255)
  rating             RatingStatus
  content            String          @db.VarChar(255)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  userId             String
  tutorId            String  
  trainingCenterId   String
  user               User?           @relation(fields: [userId], references: [id])
  tutorTrainingCenter   TutorTrainingCenter @relation(fields: [tutorId, trainingCenterId], references: [tutorId, trainingCenterId])

  @@index([userId])
  @@index([tutorId, trainingCenterId]) // 복합 인덱스 설정
}

model Notice{
  id                 String          @id  @default(uuid())
  title              String          @db.VarChar(255)
  content            String          @db.Text
  image              String?         @db.VarChar(255)
  attachments        String[]
  isFixed            Boolean         @default(false)
  index              Int             @default(0)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

enum AnimalType {
  DOG 
  CAT
}

enum CurriculumStep {
  LECTURE 
  LECTURE_END
  TRAINING
  END
}

enum CurriculumCategory {
  COMMUNICATION
  TRAINING 
  BEAUTY
}



enum PriceType {
  FREE
  PAID
}

enum GenderType {
  MALE 
  FEMALE 
}

enum OccupationType {
  TRAINER 
  VETERINARIAN 
  GROOMER 
  PROFESSOR 
}

enum Category {
  FOOD 
  BEAUTY
  HEALTH
  WALK
  TRAINING 
  ADOPT
  PLAY
  COMMUNICATION 
}

enum AdoptionStatus {
  NOT_ADOPTION
  ADOPTION 
  ABANDON
}

enum AdoptionStep {
  NOT_INVITATION
  INVITATION
  CURRICULUM
  FINAL_CONSENTFORM
  ADOPTION
  }

enum RatingStatus {
  VERY_GOOD 
  GOOD
  GENERAL
  BAD
}

enum AttendanceStatus {
  ATTENDANCE 
  TARDY
  ABSENT
  SCHEDULED
}

enum MembershipType {
  STANDARD 
  PREMIUM
}

enum CorporationAccessStatus {
  OPERATION //입양, 분양 ,강사 등록, 강의 등록
  STANDARD //입양, 분양까지
}
