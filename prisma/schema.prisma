// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id  @default(uuid())
  name               String          @db.VarChar(255)
  email              String          @unique @db.VarChar(255)   
  address            String          @db.VarChar(255)
  phoneNumber        String          @unique @db.VarChar(255)
  registrationNumber String          @unique @db.VarChar(255)
  nickname           String          @unique @db.VarChar(255)
  birthday           DateTime        @default(now())
  gender             GenderType      @default(MALE)
  isNewNews_SMS      Boolean         @default(true)
  isNotice_SMS       Boolean         @default(true)
  isPromotion_SMS    Boolean         @default(true)
  isNewNews_Email    Boolean         @default(true)
  isNotice_Email     Boolean         @default(true)
  isPromotion_Email  Boolean         @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  lectureId          String
  lecture            Lecture?        @relation(fields: [lectureId], references: [id])
  adoptions          Adoption[]
  Abandons           Abandon[]
  animals            Animal[]
  userCurriculum     UserCurriculum[]
  reviews            Review[]
  userPayment        UserPayment[]

  @@index([lectureId])
}

model UserPayment {
  id                  String          @id  @default(uuid())
  user_email          String          @db.VarChar(255)
  membershipType      MembershipType
  membershiPrice      Int             @default(9900)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  userId              String
  user                User?           @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserCurriculum {
  id                  String          @id  @default(uuid())
  curriculumType      AnimalType      @default(DOG)
  curriculumStep      CurriculumStep  @default(LECTURE)
  currentCategory     Category        @default(TRAINING)
  currentIndex        Int             @default(1)
  attendances         Json?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  userId              String
  user                User?           @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Corporation {
  id                String          @id  @default(uuid())
  owner_name        String          @db.VarChar(255)        
  corporation_name  String          @db.VarChar(255)      
  address           String          @db.VarChar(255)
  phoneNumber       String          @unique @db.VarChar(255)  
  email             String          @unique @db.VarChar(255)
  business_number   String          @unique @db.VarChar(255)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  tutors            Tutor[]
  adoptions         Adoption[]
  Abandons          Abandon[]
  animals           Animal[]
  traningCenter     TraningCenter[]
}

model Tutor {
  id                 String          @id @default(uuid())
  name               String          @db.VarChar(255)
  introduction       String          @db.Text
  career             String          @db.VarChar(255)
  profile_img        String          @db.VarChar(255)
  traning_location   String          @db.VarChar(255)
  traning_name       String          @db.VarChar(255)
  corporation_name   String          @db.VarChar(255)
  occupation         OccupationType  @default(TRAINER)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  corporationId      String    
  corporation        Corporation?    @relation(fields: [corporationId], references: [id])
  lectures           Lecture[]
  curriculumLectures CurriculumLecture[]
  traningCenter      TraningCenter[]

  @@index([corporationId])
}

model Lecture {
  id                String          @id  @default(uuid())
  title             String          @db.VarChar(255)
  content           String          @db.Text
  animal_type       AnimalType      @default(CAT)
  price_type        PriceType       @default(FREE)
  category          Category        @default(TRAINING)
  thumbnailPath     String          @db.VarChar(255)
  videoUrl          String          @db.VarChar(255)
  like              Int             @default(0)
  tags              String[]    
  bookmark          Boolean         @default(false)
  tutor_name        String          @db.VarChar(255)
  tutor_occupation  OccupationType  @default(TRAINER)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  tutorId           String
  tutor             Tutor?          @relation(fields: [tutorId], references: [id])
  users             User[]

  @@index([tutorId])
}

model CurriculumLecture {
  id                      String          @id  @default(uuid())
  index                   Int             @default(0)
  title                   String          @db.VarChar(255)
  content                 String          @db.Text
  animal_type             AnimalType      @default(CAT)
  category                Category        @default(TRAINING)
  thumbnailPath           String          @db.VarChar(255)
  videoUrl                String          @db.VarChar(255)  
  tutor_name              String          @db.VarChar(255)
  tutor_occupation        OccupationType  @default(TRAINER)
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  tutorId                 String
  curriculumCollectionId  String
  tutor                   Tutor?          @relation(fields: [tutorId], references: [id])

  @@index([tutorId])
}

model Adoption {
  id                String          @id  @default(uuid())
  adoption_date     DateTime        @default(now())
  abandon_date      DateTime?
  status            AdoptionStatus  @default(ADOPTION)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  userId            String
  corporationId     String
  animalId          String
  user              User?           @relation(fields: [userId], references: [id])
  corporation       Corporation?    @relation(fields: [corporationId], references: [id])
  animal            Animal?         @relation(fields: [animalId], references: [id])

  @@index([userId])
  @@index([corporationId])
  @@index([animalId])
}

model Abandon {
  id                String          @id  @default(uuid())
  abandon_date      DateTime        @default(now())
  adoption_date     DateTime?     
  abandon_reason    String          @db.Text
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  userId            String
  corporationId     String
  animalId          String
  user              User?           @relation(fields: [userId], references: [id])
  corporation       Corporation?    @relation(fields: [corporationId], references: [id])
  animal            Animal?         @relation(fields: [animalId], references: [id])
  
  @@index([userId])
  @@index([corporationId])
  @@index([animalId])
}

model Animal {
  id                String          @id  @default(uuid())
  name              String?         @db.VarChar(255)
  age               Int?            @default(0)
  gender            GenderType      @default(MALE)
  breed             String          @db.VarChar(255)
  profile           String          @db.VarChar(255)
  additionalImgs    String[]          
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  userId            String
  corporationId     String
  user              User?                                                                                                                                                                                                             @relation(fields: [userId], references: [id])
  corporation       Corporation?    @relation(fields: [corporationId], references: [id])
  adoptions         Adoption[]
  Abandons          Abandon[]

  @@index([userId])
  @@index([corporationId])
}

model TraningCenter {
  id                 String          @id  @default(uuid())
  name               String          @db.VarChar(255)
  introduction       String          @db.Text
  profile            String          @db.VarChar(255)
  additionalImgs     String[]       
  address            String          @db.VarChar(255)
  holidays           String[]
  price              Int             @default(0)
  like               Int             @default(0)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  tutorId            String  
  corporationId      String
  tutor              Tutor?          @relation(fields: [tutorId], references: [id])
  corporation        Corporation?    @relation(fields: [corporationId], references: [id])
  reviews            Review[]

  @@index([tutorId])
  @@index([corporationId])
}

model Review {
  id                 String          @id  @default(uuid())
  parentId           String?
  rating             RatingStatus
  content            String          @db.VarChar(255)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  userId             String  
  traningCenterId    String
  user               User?          @relation(fields: [userId], references: [id])
  traningCenter      TraningCenter? @relation(fields: [traningCenterId], references: [id])

  @@index([userId])
  @@index([traningCenterId])
}

model Notice{
  id                 String          @id  @default(uuid())
  title              String          @db.VarChar(255)
  content            String          @db.Text
  image              String?         @db.VarChar(255)
  attachments        String[]
  isFixed            Boolean         @default(false)
  index              Int             @default(0)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

enum AnimalType {
  DOG 
  CAT
}

enum CurriculumStep {
  LECTURE 
  LECTURE_END
  TRANING
  END
}


enum PriceType {
  FREE
  PAID
}

enum GenderType {
  MALE 
  FEMALE 
}

enum OccupationType {
  TRAINER 
  VETERINARIAN 
  GROOMER 
  PROFESSOR 
}

enum Category {
  FOOD 
  BEAUTY
  HEALTH
  WALK
  TRAINING 
  ADOPT
  PLAY
  COMMUNICATION 
}

enum AdoptionStatus {
  ADOPTION 
  Abandon
}

enum RatingStatus {
  VERY_GOOD 
  GOOD
  GENERAL
  BAD
}

enum AttendanceStatus {
  ATTENDANCE 
  TARDY
  ABSENT
  SCHEDULED
}

enum MembershipType {
  STANDARD 
  PREMIUM
}
