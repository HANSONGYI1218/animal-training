generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                 String          @id      //@id => primary key
  name               String          @db.VarChar(255)
  email              String          @unique @db.VarChar(255)   
  address            String          @db.VarChar(255)
  phoneNumber        String          @unique @db.VarChar(255)
  registrationNumber String          @unique @db.VarChar(255)
  nickname           String          @unique @db.VarChar(255)
  birthday           DateTime        @default(now())
  gender             GenderType      @default(MALE)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  lectureId          String
  lecture            Lecture?        @relation(fields: [lectureId], references: [id])
  adoptions          Adoption[]
  Abandons           Abandon[]
  animals            Animal[]

  @@index([lectureId])
}

model Corporation {
  id                String          @id      //@id => primary key
  owner_name        String          @db.VarChar(255)        
  corporation_name  String          @db.VarChar(255)      
  address           String          @db.VarChar(255)
  phoneNumber       String          @unique @db.VarChar(255)  
  email             String          @unique @db.VarChar(255)
  business_number   String          @unique @db.VarChar(255)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  tutors            Tutor[]
  adoptions         Adoption[]
  Abandons          Abandon[]
  animals           Animal[]
}

model Tutor {
  id                String          @id      //@id => primary key
  name              String          @db.VarChar(255)
  introduction      String          @db.Text
  career            String          @db.VarChar(255)
  traning_location  String          @db.VarChar(255)
  traning_name      String          @db.VarChar(255)
  corporation_name  String          @db.VarChar(255)
  occupation        OccupationType  @default(TRAINER)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  corporationId     String    
  corporation       Corporation?    @relation(fields: [corporationId], references: [id])
  lectures          Lecture[]

  @@index([corporationId])
}

model Lecture {
  id                String          @id      //@id => primary key
  title             String          @db.VarChar(255)
  content           String          @db.Text
  animal_type       AnimalType      @default(CAT)
  price_type        PriceType       @default(FREE)
  category          Category        @default(TRAINING)
  thumbnailPath     String          @db.VarChar(255)
  videoUrl          String          @db.VarChar(255)
  like              Int             @default(0)
  tags              String[]    
  bookmark          Boolean         @default(false)
  tutor_name        String          @db.VarChar(255)
  tutor_occupation  OccupationType  @default(TRAINER)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  tutorId           String
  tutor             Tutor?          @relation(fields: [tutorId], references: [id])
  users             User[]

  @@index([tutorId])
}

model Adoption {
  id                String          @id      //@id => primary key
  adoption_date     DateTime        @default(now())
  abandon_date      DateTime?
  status            AdoptionStatus  @default(ADOPTION)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  userId            String
  corporationId     String
  animalId          String
  user              User?           @relation(fields: [userId], references: [id])
  corporation       Corporation?    @relation(fields: [corporationId], references: [id])
  animal            Animal?         @relation(fields: [animalId], references: [id])

  @@index([userId])
  @@index([corporationId])
  @@index([animalId])
}

model Abandon {
  id                String          @id      //@id => primary key
  abandon_date      DateTime        @default(now())
  adoption_date     DateTime?     
  abandon_reason    String          @db.Text
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  userId            String
  corporationId     String
  animalId          String
  user              User?           @relation(fields: [userId], references: [id])
  corporation       Corporation?    @relation(fields: [corporationId], references: [id])
  animal            Animal?         @relation(fields: [animalId], references: [id])
  
  @@index([userId])
  @@index([corporationId])
  @@index([animalId])
}

model Animal {
  id                String          @id      //@id => primary key
  name              String?         @db.VarChar(255)
  age               Int?            @default(0)
  gender            GenderType      @default(MALE)
  breed             String          @db.VarChar(255)
  profile           String          @db.VarChar(255)
  additionalImg     String[]          
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  userId            String
  corporationId     String
  user              User?                                                                                                                                                                                                             @relation(fields: [userId], references: [id])
  corporation       Corporation?    @relation(fields: [corporationId], references: [id])
  adoptions         Adoption[]
  Abandons          Abandon[]

  @@index([userId])
  @@index([corporationId])
}

enum AnimalType {
  DOG 
  CAT
}

enum PriceType {
  FREE
  PAID
}

enum GenderType {
  MALE 
  FEMALE 
}

enum OccupationType {
  TRAINER 
  VETERINARIAN 
  GROOMER 
  PROFESSOR 
}

enum Category {
  FOOD 
  BEAUTY
  HEALTH
  WALK
  TRAINING 
  ADOPT
  PLAY
  COMMUNICATION 
}

enum AdoptionStatus {
  ADOPTION 
  Abandon
}